class Solution {
    public boolean possibleBipartition(int n, int[][] dislikes) {
        HashMap<Integer, List<Integer>> map = new HashMap<>();
        for(int a[]: dislikes){
            map.putIfAbsent(a[0], new ArrayList<>());
            map.putIfAbsent(a[1], new ArrayList<>());
            map.get(a[0]).add(a[1]);
            map.get(a[1]).add(a[0]);
        }
        int color[] = new int[n+1];
        for(int i=1;i<=n;i++){
            color[i]=-1;
        }
        for(int i=1;i<=n;i++){
            if(color[i]==-1){
                if(dfs(i,0,color, map)==false)
                    return false;
            }
        }
        return true;
    }
    private boolean dfs(int node, int col, int color[], HashMap<Integer, List<Integer>> map ){
        color[node]=col;
        if(map.containsKey(node)){
            for(int it: map.get(node)){
                if(color[it]==-1){
                    if(dfs(it, 1-col, color, map)==false)
                        return false;
                }
                else if(color[it]==col)
                    return false;
            }
        }
        
        return true;
    }
}
