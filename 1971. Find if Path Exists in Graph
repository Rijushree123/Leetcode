class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        if(source==destination)
            return true;
        HashMap<Integer, List<Integer>> map = new HashMap<>();
        for(int[] e: edges){
            map.putIfAbsent(e[0], new ArrayList<>());
            map.putIfAbsent(e[1], new ArrayList<>());
            map.get(e[0]).add(e[1]);
            map.get(e[1]).add(e[0]);
        }
        Queue<Integer> q = new LinkedList<>();
        q.offer(source);
        while(!q.isEmpty()){
            int size = q.size();
            while(size-->0){
                int curr = q.poll();
                for( int neighbor : map.getOrDefault(curr, new ArrayList<>()) ){
                    if(neighbor == destination)
                        return true;
                    q.offer(neighbor);
                }
                map.remove(curr);
            }
        }
        return false;
    }
}
